--- pvemanagerlib.js.orig	2023-01-24 17:34:31.490768700 +0100
+++ pvemanagerlib.js	2023-01-24 17:39:29.331128600 +0100
@@ -8294,6 +8294,7 @@
     comboItems: [
 	['comstar', 'Comstar'],
 	['istgt', 'istgt'],
+	['freenas', 'FreeNAS-API'],
 	['iet', 'IET'],
 	['LIO', 'LIO'],
     ],
@@ -52368,6 +52369,7 @@
 	data: {
 	    isLIO: false,
 	    isComstar: true,
+		isFreeNAS: false,
 	    hasWriteCacheOption: true,
 	},
     },
@@ -52380,10 +52382,27 @@
 	    },
 	},
 	changeISCSIProvider: function(f, newVal, oldVal) {
+	    var me = this;
 	    var vm = this.getViewModel();
 	    vm.set('isLIO', newVal === 'LIO');
 	    vm.set('isComstar', newVal === 'comstar');
-	    vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'istgt');
+	    vm.set('isFreeNAS', newVal === 'freenas');
+	    vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'freenas' || newVal === 'istgt');
+	    if (newVal !== 'freenas') {
+		me.lookupReference('freenas_use_ssl_field').setValue(false);
+		me.lookupReference('freenas_apiv4_host_field').setValue('');
+		me.lookupReference('freenas_user_field').setValue('');
+		me.lookupReference('freenas_user_field').allowBlank = true;
+		me.lookupReference('freenas_password_field').setValue('');
+		me.lookupReference('freenas_password_field').allowBlank = true;
+		me.lookupReference('freenas_confirmpw_field').setValue('');
+		me.lookupReference('freenas_confirmpw_field').allowBlank = true;
+	    } else {
+		me.lookupReference('freenas_user_field').allowBlank = true;
+		me.lookupReference('freenas_api_token_field').allowBlank = true;
+		me.lookupReference('freenas_password_field').allowBlank = true;
+		me.lookupReference('freenas_confirmpw_field').allowBlank = true;
+	    }
 	},
     },
 
@@ -52401,6 +52420,7 @@
     },
 
     setValues: function(values) {
+	values.freenas_confirmpw = values.freenas_password;
 	values.writecache = values.nowritecache ? 0 : 1;
 	this.callParent([values]);
     },
@@ -52417,7 +52437,7 @@
 		allowBlank: false,
 	    },
 	    {
-		xtype: me.isCreate ? 'textfield' : 'displayfield',
+		xtype: 'textfield',
 		name: 'pool',
 		value: '',
 		fieldLabel: gettext('Pool'),
@@ -52427,11 +52447,11 @@
 		xtype: me.isCreate ? 'textfield' : 'displayfield',
 		name: 'blocksize',
 		value: '4k',
-		fieldLabel: gettext('Block Size'),
+		fieldLabel: gettext('ZFS Block Size'),
 		allowBlank: false,
 	    },
 	    {
-		xtype: me.isCreate ? 'textfield' : 'displayfield',
+		xtype: 'textfield',
 		name: 'target',
 		value: '',
 		fieldLabel: gettext('Target'),
@@ -52442,9 +52462,34 @@
 		name: 'comstar_tg',
 		value: '',
 		fieldLabel: gettext('Target group'),
-		bind: me.isCreate ? { disabled: '{!isComstar}' } : { hidden: '{!isComstar}' },
+		bind: {
+		    hidden: '{!isComstar}'
+		},
 		allowBlank: true,
 	    },
+	    {
+		xtype: 'proxmoxcheckbox',
+		name: 'freenas_use_ssl',
+		reference: 'freenas_use_ssl_field',
+		inputId: 'freenas_use_ssl_field',
+		checked: false,
+		bind: {
+		    hidden: '{!isFreeNAS}'
+		},
+		uncheckedValue: 0,
+		fieldLabel: gettext('API use SSL'),
+	    },
+	    {
+		xtype: 'textfield',
+		name: 'freenas_user',
+		reference: 'freenas_user_field',
+		inputId: 'freenas_user_field',
+		value: '',
+		fieldLabel: gettext('API Username'),
+		bind: {
+		    hidden: '{!isFreeNAS}'
+		},
+	    },
 	];
 
 	me.column2 = [
@@ -52474,7 +52519,9 @@
 		xtype: me.isCreate ? 'textfield' : 'displayfield',
 		name: 'comstar_hg',
 		value: '',
-		bind: me.isCreate ? { disabled: '{!isComstar}' } : { hidden: '{!isComstar}' },
+		bind: {
+		    hidden: '{!isComstar}'
+		},
 		fieldLabel: gettext('Host group'),
 		allowBlank: true,
 	    },
@@ -52482,9 +52529,77 @@
 		xtype: me.isCreate ? 'textfield' : 'displayfield',
 		name: 'lio_tpg',
 		value: '',
-		bind: me.isCreate ? { disabled: '{!isLIO}' } : { hidden: '{!isLIO}' },
-		allowBlank: false,
+		bind: {
+		    hidden: '{!isLIO}'
+		},
 		fieldLabel: gettext('Target portal group'),
+		allowBlank: true
+	    },
+	    {
+		xtype: 'proxmoxtextfield',
+		name: 'freenas_apiv4_host',
+		reference: 'freenas_apiv4_host_field',
+		value: '',
+		editable: true,
+		emptyText: Proxmox.Utils.noneText,
+		bind: {
+		    hidden: '{!isFreeNAS}'
+		},
+		fieldLabel: gettext('API IPv4 Host'),
+		allowBlank: true
+	    },
+	    {
+		xtype: 'proxmoxtextfield',
+		name: 'freenas_api_token',
+		reference: 'freenas_api_token_field',
+		value: '',
+		editable: true,
+		emptyText: Proxmox.Utils.noneText,
+		bind: {
+		    hidden: '{!isFreeNAS}'
+		},
+		fieldLabel: gettext('TrueNAS API Token v2'),
+		allowBlank: true
+	    },
+	    {
+		xtype: 'proxmoxtextfield',
+		name: 'freenas_password',
+		reference: 'freenas_password_field',
+		inputType: me.isCreate ? '' : 'password',
+		value: '',
+		editable: true,
+		emptyText: Proxmox.Utils.noneText,
+		bind: {
+		    hidden: '{!isFreeNAS}'
+		},
+		fieldLabel: gettext('API Password'),
+		allowBlank: true,
+		change: function(f, value) {
+		    if (f.rendered) {
+			f.up().down('field[name=freenas_confirmpw]').validate();
+		    }
+		},
+	    },
+	    {
+		xtype: 'proxmoxtextfield',
+		name: 'freenas_confirmpw',
+		reference: 'freenas_confirmpw_field',
+		inputType: me.isCreate ? '' : 'password',
+		value: '',
+		editable: true,
+		submitValue: false,
+		emptyText: Proxmox.Utils.noneText,
+		bind: {
+		    hidden: '{!isFreeNAS}'
+		},
+		fieldLabel: gettext('Confirm Password'),
+		validator: function(value) {
+		    var pw = this.up().down('field[name=freenas_password]').getValue();
+		    if (pw !== value) {
+			return "Passwords do not match!";
+		    }
+		    return true;
+		},
 	    },
 	];
 
